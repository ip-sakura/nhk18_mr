#include <ros.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int32.h>
#include <Wire.h>
#include <stdlib.h>
#include "ti2c.h"
#include "ise_motor_driver.h"
#include "std_msgs/Int32MultiArray.h"
#include <std_msgs/MultiArrayLayout.h>
#include <std_msgs/MultiArrayDimension.h>

#define DELTA_L 0
#define DELTA_R 1
#define DGAP 2

uint8_t addrr = 0x27;
uint8_t addrl = 0x26;

IseMotorDriver mdl = IseMotorDriver(addrl);
IseMotorDriver mdr = IseMotorDriver(addrr);
int l = 0;
int r = 0;

std_msgs::Int32MultiArray encarr;
ros::Publisher enc_pub("enc",&encarr);

typedef struct stats{
  long enc_val;//エンコーダから読み取った値
  long delta;//enc_val (now) - enc_val (pre)
  int add;//deltaをみたうえでの次の加算値
}motor_stats;

motor_stats ml_stats = {0,0,0};
motor_stats mr_stats = {0,0,0};

std_msgs::Int16 l_minus_r_vgap;

void motorLCallBack(const std_msgs::Int16& pw){
  l = pw.data;
  mdl.setSpeed(l);
}
void motorRCallBack(const std_msgs::Int16& pw){
  r = pw.data;
  mdr.setSpeed(r);
}

ros::NodeHandle nh;
ros::Subscriber<std_msgs::Int16>mr("mr",motorRCallBack);
ros::Subscriber<std_msgs::Int16>ml("ml",motorLCallBack);
ros::Publisher v_lmr_pub("v_lmr",&l_minus_r_vgap);



void encoder(){
  ml_stats.delta = mdl.encorder() - ml_stats.enc_val;
  mr_stats.delta = mdr.encorder() - mr_stats.enc_val;
  ml_stats.enc_val = mdl.encorder();
  mr_stats.enc_val = mdr.encorder();

  encarr.data[DELTA_L] = ml_stats.delta;
  encarr.data[DELTA_R] = mr_stats.delta;
  encarr.data[DGAP] = encarr.data[DELTA_L] - encarr.data[DELTA_R];

  l_minus_r_vgap.data = ml_stats.delta - mr_stats.delta;
}
  

void setup(){
  encarr.data_length = 3;
  encarr.data = (int32_t*)malloc(sizeof(int32_t*)*3);
  Wire.begin();
  nh.initNode();
  nh.subscribe(ml);
  nh.subscribe(mr);
  nh.advertise(enc_pub);
}

void loop() {
  encoder();
  enc_pub.publish(&encarr);
  nh.spinOnce();
  delay(100);
}
